##
## -------------------------
## |   M E D I A B O X     |
## -------------------------
##
## Container based media tools configuration
##
## -- DO NOT EDIT THIS FILE --
##
## Configuration items for this file are taken from the .env file
##
## Have docker-compose.yml and .env in the same directory to launch the stack

version: '2.4'

######################
# SERVICES TO LAUNCH #
######################

services:

    # ----------------------------------------
    # COUCHPOTATO
    # ----------------------------------------
    #couchpotato:
    #    image: linuxserver/couchpotato
    #    container_name: couchpotato
    #    restart: unless-stopped
    #    ports:
    #        - '5050:5050'
    #    environment:
    #        - PUID=${PUID}
    #        - PGID=${PGID}
    #    volumes:
    #        - '${CONFIGDIRECTORY}/couchpotato:/config'
    #        - '${MEDIADIRECTORY}/completed:/downloads'
    #        - '${MEDIADIRECTORY}/movies:/movies'

    # ----------------------------------------
    # DELUGEVPN
    # ----------------------------------------
    #arch-delugevpn:
    #    image: binhex/arch-delugevpn
    #    container_name: delugevpn
    #    restart: unless-stopped
    #    ports:
    #        - '8112:8112'
    #        - '8118:8118'
    #        - '58846:58846'
    #        - '58946:58946'
    #    cap_add:
    #        - NET_ADMIN
    #    environment:
    #        - VPN_ENABLED=yes
    #        - VPN_USER=${PIAUNAME}
    #        - VPN_PASS=${PIAPASS}
    #        - VPN_REMOTE=ca.privateinternetaccess.com
    #        - VPN_PORT=1198
    #        - VPN_PROTOCOL=udp
    #        - VPN_DEVICE_TYPE=tun
    #        - VPN_PROV=pia
    #        - STRONG_CERTS=no
    #        - ENABLE_PRIVOXY=yes
    #        - LAN_NETWORK=${CIDR_ADDRESS}
    #        - NAME_SERVERS=209.222.18.222,37.235.1.174,8.8.8.8,209.222.18.218,37.235.1.177,8.8.4.4
    #        - DEBUG=false
    #        - PUID=${PUID}
    #        - PGID=${PGID}
    #    volumes:
    #        - '${MEDIADIRECTORY}:/data'
    #        - '${CONFIGDIRECTORY}/delugevpn/config:/config'

    # ----------------------------------------
    # TRANSMISSION
    # ----------------------------------------
    transmission:
        image: haugene/transmission-openvpn
        container_name: transmission
        restart: unless-stopped
        cpus: 2
        devices:
            - '/dev/net/tun:/dev/net/tun'
        ports:
            - '9091:9091'
        cap_add:
            - NET_ADMIN
        dns:
            - 8.8.8.8
            - 8.8.4.4
        healthcheck:
            test: "transmission-remote --session-stats || exit 1"
            interval: "30s"
            timeout: "10s"
            start_period: "6m"
            retries: 2
        environment:
            - OPENVPN_PROVIDER=PIA
            - OPENVPN_USERNAME=${PIAUNAME}
            - OPENVPN_PASSWORD=${PIAPASS}
            - 'OPENVPN_CONFIG=ca_montreal'
            #- 'OPENVPN_CONFIG=ca_toronto'
            - ENABLE_UFW=true
            - LOCAL_NETWORK=${CIDR_ADDRESS}
            - 'OPENVPN_OPTS=--inactive 3600 --ping 10 --ping-exit 60'
            - PUID=${PUID}
            - PGID=${PGID}
            - TRANSMISSION_DOWNLOAD_QUEUE_SIZE=20
            - TRANSMISSION_QUEUE_STALLED_MINUTES=3
            - TRANSMISSION_PREALLOCATION=2
            - TRANSMISSION_CACHE_SIZE_MB=200
            - TRANSMISSION_ALT_SPEED_TIME_ENABLED=true
            - TRANSMISSION_ALT_SPEED_TIME_BEGIN=180
            - TRANSMISSION_ALT_SPEED_TIME_END=480
            - TRANSMISSION_ALT_SPEED_UP=0
            - TRANSMISSION_ALT_SPEED_DOWN=0
            - TRANSMISSION_RPC_WHITELIST_ENABLED=false
            - TRANSMISSION_HOST_RPC_WHITELIST_ENABLED=false
            - TRANSMISSION_SPEED_LIMIT_UP=15000
            - TRANSMISSION_SPEED_LIMIT_UP_ENABLED=true
            - TRANSMISSION_SPEED_LIMIT_DOWN=25000
            - TRANSMISSION_SPEED_LIMIT_DOWN_ENABLED=true
            - TRANSMISSION_UPLOAD_SLOTS_PER_TORRENT=20
            - TRANSMISSION_PEER_LIMIT_PER_TORRENT=40
            - TRANSMISSION_PEER_LIMIT_GLOBAL=500
            - TRANSMISSION_WEB_UI=transmission-web-control
            - TRANSMISSION_SCRAPE_PAUSED_TORRENTS_ENABLED=false
        volumes:
            - '${MEDIACOMPLETEDIRECTORY}/completed:/data/completed'
            - '${CONFIGDIRECTORY}/transmission:/data/transmission-home:cached'
            - '${MEDIAINCOMPLETEDIRECTORY}/incomplete-transmission:/data/incomplete'

    # ----------------------------------------
    # SABNZBD
    # ----------------------------------------
    sabnzbd:
        image: linuxserver/sabnzbd
        container_name: sabnzbd
        restart: unless-stopped
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
        volumes:
            - '${CONFIGDIRECTORY}/sabnzbd:/config'
            - '${MEDIACOMPLETEDIRECTORY}/completed:/downloads'
            - '${MEDIAINCOMPLETEDIRECTORY}/incomplete-sab:/incomplete-downloads'
        ports:
            - 8081:8080

    # ----------------------------------------
    # DUPLICATI
    # ----------------------------------------
    duplicati:
        image: linuxserver/duplicati
        container_name: duplicati
        restart: unless-stopped
        cpus: 1.5
        ports:
            - '8200:8200'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - '${CONFIGDIRECTORY}/duplicati:/config'
            - '${MEDIAINCOMPLETEDIRECTORY}/config-backups:/backups'
            - '${CONFIGDIRECTORY}:/source'

    # ----------------------------------------
    # HTTP
    # ----------------------------------------
    uhttpd:
        image: fnichol/uhttpd
        container_name: uhttpd
        restart: unless-stopped
        cpus: 1.5
        ports:
            - '8080:80'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - '${CONFIGDIRECTORY}/www:/www'

    # ----------------------------------------
    # JACKETT
    # ----------------------------------------
    jackett:
        image: linuxserver/jackett
        container_name: jackett
        restart: unless-stopped
        cpus: 1.5
        ports:
            - '9117:9117'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - '${CONFIGDIRECTORY}/jackett:/config'

    # ----------------------------------------
    # NZBHYDRA2
    # ----------------------------------------
    nzbhydra2:
        image: linuxserver/nzbhydra2
        container_name: nzbhydra2
        restart: unless-stopped
        ports:
            - '5076:5076'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
        healthcheck:
            test: "curl --fail -L localhost:5076 || exit 1"
            interval: "15s"
            timeout: "5s"
            start_period: "30s"
            retries: 2
        volumes:
            - '${CONFIGDIRECTORY}/nzbhydra2:/config'

    # ----------------------------------------
    # MINIO
    # ----------------------------------------
    #minio:
    #    image: minio/minio
    #    container_name: minio
    #    restart: unless-stopped
    #    ports:
    #        - '9009:9000'
    #    environment:
    #        - MINIO_ACCESS_KEY=minio
    #        - MINIO_SECRET_KEY=minio123
    #    volumes:
    #        - '${MEDIADIRECTORY}:/export'
    #    command: server /export

    # ----------------------------------------
    # NETDATA
    # ----------------------------------------
    #netdata:
    #    image: titpetric/netdata
    #    container_name: netdata
    #    restart: unless-stopped
    #    ports:
    #        - '19999:19999'
    #    cap_add:
    #        - SYS_PTRACE
    #    volumes:
    #        - '/proc:/host/proc:ro'
    #        - '/sys:/host/sys:ro'
    #        - '/var/run/docker.sock:/var/run/docker.sock'

    # ----------------------------------------
    # Google OAuth Proxy
    # ----------------------------------------
    authproxy-ombi:
        image: quay.io/oauth2-proxy/oauth2-proxy
        container_name: authproxy-ombi
        restart: unless-stopped
        cpus: 1.5
        ports:
            - '4180'
        command:
            - --reverse-proxy=true  # Running behind traefik
            - --upstream=http://ombi:3579/
            - --upstream=http://ombi:3579/ombi
            - --http-address=0.0.0.0:4180
            - --redirect-url=https://${DOMAIN_OMBI_1}/oauth2/callback
            - --cookie-name=oauth_proxy_ombi_2  # Bump this when changing domain / hostname
            - --cookie-domain=${DOMAIN_OMBI_1}
            - --cookie-expire=1440h  # 60 days
            - --cookie-refresh=1h
            - --cookie-samesite=lax
            - --authenticated-emails-file=/data/authed.txt
            - --skip-provider-button
            - --pass-user-headers=true
            - --pass-basic-auth=false  # so the proxy doesn't trample on Ombi's Authorization headers
        environment:
            OAUTH2_PROXY_COOKIE_SECRET: ${OAUTH2_PROXY_COOKIE_SECRET}
            OAUTH2_PROXY_COOKIE_DOMAIN: ${DOMAIN_OMBI_1}
            OAUTH2_PROXY_CLIENT_ID: ${OAUTH2_PROXY_CLIENT_ID}
            OAUTH2_PROXY_CLIENT_SECRET: ${OAUTH2_PROXY_CLIENT_SECRET}
        volumes:
            - "${CONFIGDIRECTORY}/authproxy/authed-emails-ombi.txt:/data/authed.txt:ro"
        labels:
            - traefik.enable=true
            - traefik.http.routers.authproxy-ombi.rule=(Host(`${DOMAIN_OMBI_1}`) || Host(`${DOMAIN_OMBI_2}`) || Host(`${DOMAIN_OMBI_3}`))
            # Redirect from DOMAIN_OMBI_2 and DOMAIN_OMBI_3 to DOMAIN_OMBI_1
            - "traefik.http.middlewares.ombi-redirectregex.redirectregex.regex=^http(s?)://(${DOMAIN_OMBI_2}|${DOMAIN_OMBI_3})/(.*)"
            - "traefik.http.middlewares.ombi-redirectregex.redirectregex.replacement=http$${1}://${DOMAIN_OMBI_1}/$${3}"
            - traefik.http.routers.authproxy-ombi.middlewares=ombi-redirectregex@docker
            # Apply the cert resolver
            - traefik.http.routers.authproxy-ombi.tls.certresolver=leresolver
            - traefik.http.routers.authproxy-ombi.entrypoints=https  # using any TLS options limits the entire router to tls-only. Make it explicit by only listening on the TLS port

    authproxy-nginx-rtmp:
        image: quay.io/oauth2-proxy/oauth2-proxy
        container_name: authproxy-nginx-rtmp
        restart: unless-stopped
        cpus: 1.5
        ports:
            - '4180'
        command:
            - --reverse-proxy=true  # Running behind traefik
            - --upstream=http://nginx-rtmp:80/
            - --http-address=0.0.0.0:4180
            - --redirect-url=https://${DOMAIN_NGINX_RTMP_1}/oauth2/callback
            - --cookie-name=oauth_proxy_rtmp_1  # Bump this when changing domain / hostname
            - --cookie-domain=${DOMAIN_NGINX_RTMP_1}
            - --cookie-expire=1440h  # 60 days
            - --cookie-refresh=1h
            - --cookie-samesite=lax
            - --authenticated-emails-file=/data/authed.txt
            - --skip-provider-button
            - --pass-user-headers=true
            # These next few options allow extrating auth tokens and using them as bearer tokens
            # https://github.com/oauth2-proxy/oauth2-proxy/issues/315#issuecomment-565047662
            # - --pass-access-token=true
            # - --skip-jwt-bearer-tokens=true
            # - --extra-jwt-issuers=https://accounts.google.com=${OAUTH2_PROXY_CLIENT_ID}
            - --skip-auth-regex="^/hls/.*"
        environment:
            OAUTH2_PROXY_COOKIE_SECRET: ${OAUTH2_PROXY_COOKIE_SECRET}
            OAUTH2_PROXY_COOKIE_DOMAIN: ${DOMAIN_NGINX_RTMP_1}
            OAUTH2_PROXY_CLIENT_ID: ${OAUTH2_PROXY_CLIENT_ID}
            OAUTH2_PROXY_CLIENT_SECRET: ${OAUTH2_PROXY_CLIENT_SECRET}
        volumes:
            - "${CONFIGDIRECTORY}/authproxy/authed-emails-rtmp.txt:/data/authed.txt:ro"
        labels:
            - traefik.enable=true
            - traefik.http.routers.authproxy-nginx-rtmp.rule=(Host(`${DOMAIN_NGINX_RTMP_1}`) || Host(`${DOMAIN_NGINX_RTMP_2}`))
            # Redirect from DOMAIN_NGINX_RTMP_2 to DOMAIN_NGINX_RTMP_1
            - "traefik.http.middlewares.rtmp-redirectregex.redirectregex.regex=^http(s?)://(${DOMAIN_NGINX_RTMP_2})/(.*)"
            - "traefik.http.middlewares.rtmp-redirectregex.redirectregex.replacement=http$${1}://${DOMAIN_NGINX_RTMP_1}/$${3}"
            - traefik.http.routers.authproxy-nginx-rtmp.middlewares=rtmp-redirectregex@docker
            # Apply the cert resolver
            - traefik.http.routers.authproxy-nginx-rtmp.tls.certresolver=leresolver
            - traefik.http.routers.authproxy-nginx-rtmp.entrypoints=https # using any TLS options limits the entire router to tls-only. Make it explicit by only listening on the TLS port
        
    # ----------------------------------------
    # OMBI
    # ----------------------------------------
    ombi:
        image: linuxserver/ombi:development
        container_name: ombi
        restart: unless-stopped
        cpus: 1.5
        ports:
            - '3579:3579'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - '${CONFIGDIRECTORY}/ombi:/config'
        depends_on:
            - mysql

    # ----------------------------------------
    # MYSQL for Ombi
    # ----------------------------------------
    mysql:
        image: mysql:8.0
        container_name: mysql
        command: --default-authentication-plugin=mysql_native_password
        restart: unless-stopped
        cpus: 1.5
        ports:
            - '42145:3306'
        environment:
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        volumes:
            - '${CONFIGDIRECTORY}/mysql:/var/lib/mysql'

    # ----------------------------------------
    # MYSQL-Backup
    # ----------------------------------------
    mysql-backup:
        image: databack/mysql-backup
        container_name: mysql-backup
        restart: unless-stopped
        cpus: 1
        user: "0"
        environment:
            - DB_SERVER=mysql
            - DB_PORT=3306
            - DB_USER=root
            - DB_PASS=${MYSQL_ROOT_PASSWORD}
            - DB_DUMP_TARGET=/output
        volumes:
            - '${CONFIGDIRECTORY}/mysql-backup:/output'
        depends_on:
            - mysql

    # ----------------------------------------
    # PLEX
    # ----------------------------------------
    plex:
        container_name: plex
        image: plexinc/pms-docker:${PMSTAG}
        restart: unless-stopped
        cpu_shares: 2048
        cpus: 6
        ports:
            - '32400:32400/tcp'
            - '3005:3005/tcp'
            - '8324:8324/tcp'
            - '32469:32469/tcp'
            - '1900:1900/udp'
            - '32410:32410/udp'
            - '32412:32412/udp'
            - '32413:32413/udp'
            - '32414:32414/udp'
        environment:
            - PLEX_CLAIM=${PMSTOKEN}
            - ADVERTISE_IP=http://${IP_ADDRESS}:32400/
            - ALLOWED_NETWORKS=${CIDR_ADDRESS}
            - PLEX_UID=${PUID}
            - PLEX_GID=${PGID}
            - TZ=${TZ}
            # HARDWARE TRANSCODING IS SOOOOO WORTH IT, gets approx 10x faster transcodes!!!
            # https://www.funkypenguin.co.nz/note/gpu-transcoding-with-emby-plex-using-docker-nvidia/
            # https://hub.docker.com/r/linuxserver/plex
            # https://forums.plex.tv/t/how-to-setup-nvidia-hw-acceleration-in-ubuntu-docker/288625/8?u=cmuellersmith
            # https://github.com/NVIDIA/nvidia-docker
            # basically: install the latest drivers (ubuntu-drivers works), then nvidia-docker2 package,
            # then add these env vars, then restart docker and destroy / recreate the plex container
        #     - NVIDIA_VISIBLE_DEVICES=all
        #     - NVIDIA_DRIVER_CAPABILITIES=compute,video,utility
        # runtime: nvidia
        devices:
            # For quicksync
            - /dev/dri:/dev/dri
        volumes:
            - '${CONFIGDIRECTORY}/plex:/config'
            - '${CONFIGDIRECTORY}/plex/transcode:/transcode'
            - '${MEDIACOMPLETEDIRECTORY}/tv:/data/tvshows'
            - '${MEDIACOMPLETEDIRECTORY}/movies:/data/movies'

    # ----------------------------------------
    # TAUTULLI
    # ----------------------------------------
    tautulli:
        image: tautulli/tautulli
        container_name: tautulli
        restart: unless-stopped
        cpus: 1.5
        ports:
            - '8181:8181'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
        volumes:
            - '${CONFIGDIRECTORY}/plexpy:/config'
            - '${CONFIGDIRECTORY}/plex/Library/Application Support/Plex Media Server/Logs:/logs:ro'
        depends_on:
            - plex

    # ----------------------------------------
    # PORTAINER
    # ----------------------------------------
    # portainer:
    #     image: portainer/portainer:latest
    #     container_name: portainer
    #     restart: unless-stopped
    #     ports:
    #         - '9000:9000'
    #     environment:
    #         - PUID=${PUID}
    #         - PGID=${PGID}
    #     volumes:
    #         - '${CONFIGDIRECTORY}/portainer:/data'
    #         - '/var/run/docker.sock:/var/run/docker.sock'
    #     command: ${PORTAINERSTYLE} -H unix:///var/run/docker.sock

    # ----------------------------------------
    # RADARR
    # ----------------------------------------
    radarr:
        image: linuxserver/radarr
        container_name: radarr
        restart: unless-stopped
        cpus: 1.5
        ports:
            - '7878:7878'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
        volumes:
            - '${CONFIGDIRECTORY}/radarr:/config'
            # These completed and movies dir must be on the same bind mount for hardlinks to work
            # - '${MEDIACOMPLETEDIRECTORY}/movies:/data/movies'
            # - '${MEDIACOMPLETEDIRECTORY}/completed:/data/completed'
            - '${MEDIACOMPLETEDIRECTORY}:/data'
        depends_on:
            jackett:
                condition: service_started
            transmission:
                condition: service_healthy
            nzbhydra2:
                condition: service_healthy
            sabnzbd:
                condition: service_started

    # ----------------------------------------
    # SICKRAGE
    # ----------------------------------------
    #sickrage:
    #    image: linuxserver/sickrage
    #    container_name: sickrage
    #    restart: unless-stopped
    #    ports:
    #        - '8081:8081'
    #    environment:
    #        - PUID=${PUID}
    #        - PGID=${PGID}
    #    volumes:
    #        - '${CONFIGDIRECTORY}/sickrage:/config'
    #        - '${MEDIADIRECTORY}/completed:/downloads'
    #        - '${MEDIADIRECTORY}/tv:/tv'

    # ----------------------------------------
    # SONARR
    # ----------------------------------------
    sonarr:
        image: linuxserver/sonarr
        container_name: sonarr
        restart: unless-stopped
        cpus: 1.5
        ports:
            - '8989:8989'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
        volumes:
            - '${CONFIGDIRECTORY}/sonarr:/config'
            # These completed and tv dir must be on the same bind mount for hardlinks to work
            # - '${MEDIACOMPLETEDIRECTORY}/tv:/data/tv'
            # - '${MEDIACOMPLETEDIRECTORY}/completed:/data/completed'
            - '${MEDIACOMPLETEDIRECTORY}:/data'
        depends_on:
            jackett:
                condition: service_started
            transmission:
                condition: service_healthy
            nzbhydra2:
                condition: service_healthy
            sabnzbd:
                condition: service_started

    # ----------------------------------------
    # BAZARR
    # ----------------------------------------
    bazarr:
        image: linuxserver/bazarr
        container_name: bazarr
        restart: unless-stopped
        cpus: 1.5
        ports:
            - '6767:6767'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
        volumes:
            - '${CONFIGDIRECTORY}/bazarr:/config'
            - '${MEDIACOMPLETEDIRECTORY}/tv:/tv'
            - '${MEDIACOMPLETEDIRECTORY}/movies:/movies'
        depends_on:
            - sonarr
            - radarr

    # ----------------------------------------
    # WATCHTOWER
    # ----------------------------------------
    # watchtower:
    #     image: v2tec/watchtower
    #     container_name: watchtower
    #     restart: unless-stopped
    #     environment:
    #         - TZ=${TZ}
    #     volumes:
    #         - '/var/run/docker.sock:/var/run/docker.sock'
    #     command: portainer --schedule @midnight --cleanup

    # ----------------------------------------
    # IMDB RATING UPDATE TOOL
    # ----------------------------------------
    # NOTE: disabled as of 4/25/2021 -- this only has an effect when the rating source is set to
    # IMDB, and I'm now using Rotten Tomatoes instead
    # imdbupdater:
    #     image: mynttt/updatetool
    #     container_name: imdbupdater
    #     restart: unless-stopped
    #     cpus: 1.5
    #     environment:
    #         # - TMDB_API_KEY=${TMDB_API_KEY}
    #         # - TVDB_API_KEY=${TVDB_API_KEY}
    #         - TZ=${TZ}
    #     volumes:
    #         - '${CONFIGDIRECTORY}/imdbupdater:/config'
    #         - '${CONFIGDIRECTORY}/plex/Library/Application Support/Plex Media Server:/plexdata'
    #     depends_on:
    #         - plex

    # ----------------------------------------
    # NGINX RTMP/HLS
    # ----------------------------------------
    nginx-rtmp:
        build:
            context: ~/code/docker-nginx-rtmp
            dockerfile: Dockerfile
        container_name: nginx-rtmp
        # runtime: nvidia
        restart: unless-stopped
        cpus: 2
        ports:
            - '1935:1935'
            - '1936:80'
            - '5005:5005/udp'
        environment:
            - RTMP_PORT=1935
            - INCOMING_UDP_PORT=5005
            - IP_ADDRESS=${IP_ADDRESS}
            - HDHR_IP_ADDRESS=${HDHR_IP_ADDRESS}
            # - NVIDIA_VISIBLE_DEVICES=all
            # - NVIDIA_DRIVER_CAPABILITIES=all
            - TUNER_NUMBER=1
            - FLAG_PATH=/tmp/someoneIsWatching
            - TZ=${TZ}
            - URL_FRAGMENT=${URL_FRAGMENT}
        volumes:
            # - '${CONFIGDIRECTORY}/nginx-rtmp/certs:/opt/certs'
            - '${CONFIGDIRECTORY}/nginx-rtmp/nginx.conf:/etc/nginx/nginx.conf.template'
            - '${CONFIGDIRECTORY}/nginx-rtmp/static:/mnt/static'
        depends_on:
            - video-website

    # ----------------------------------------
    # VIDEO/TV FRONTEND
    # ----------------------------------------
    video-website:
        build:
            context: ~/code/video-website
            dockerfile: Dockerfile
        container_name: video-website
        restart: unless-stopped
        cpus: 0.5
        ports:
            - '3000'
        environment:
            - URL_FRAGMENT=${URL_FRAGMENT}

    # ----------------------------------------
    # XTEVE
    # ----------------------------------------
    xteve:
        image: alturismo/xteve
        container_name: xteve
        restart: unless-stopped
        ports:
            - '34400:34400'
        environment:
            - TZ=${TZ}
        healthcheck:
            test: "curl --fail -L localhost:34400/web || exit 1"
            interval: "15s"
            timeout: "5s"
            start_period: "30s"
            retries: 2
        volumes:
            - '${CONFIGDIRECTORY}/xteve:/root/.xteve'
            - '${CONFIGDIRECTORY}/xteve/_config:/config'

    # ----------------------------------------
    # SMOKEPING
    # ----------------------------------------
    smokeping:
        image: ghcr.io/linuxserver/smokeping
        container_name: smokeping
        restart: unless-stopped
        ports:
            - '34500:80'
        environment:
            - TZ=${TZ}
        volumes:
            - '${CONFIGDIRECTORY}/smokeping/config:/config'
            - '${CONFIGDIRECTORY}/smokeping/data:/data'

    # ----------------------------------------
    # TRAEFIK
    # ----------------------------------------
    traefik:
        image: traefik
        container_name: traefik
        restart: unless-stopped
        ports:
          - '80:80'
          - '443:443'
          - '1188:8080'
        environment:
            - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
        command:
            - '--accesslog=true'
            - '--log.level=DEBUG'
            - --accesslog.format=json
            - --accesslog.fields.defaultmode=keep
            - '--providers.docker=true' # listens to docker
            - "--providers.docker.exposedbydefault=false"
            - '--api.insecure=true' # enables the web ui on :8080
            - '--entryPoints.http.address=:80'
            - '--entryPoints.https.address=:443'
            - '--certificatesResolvers.leresolver.acme.email=${EMAIL}'
            - '--certificatesResolvers.leresolver.acme.storage=/acme.json'
            - '--certificatesResolvers.leresolver.acme.dnsChallenge=true'
            - '--certificatesResolvers.leresolver.acme.dnsChallenge.provider=cloudflare'
            # - '--certificatesResolvers.leresolver.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory' # uses staging server
            - '--global.sendAnonymousUsage'
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock  # So that Traefik can listen to the Docker events
            - '${CONFIGDIRECTORY}/traefik/acme.json:/acme.json'
        labels:
            - traefik.enable=true
            # HTTP -> HTTPS
            - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
            - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"
            - "traefik.http.routers.redirect-https.rule=HostRegexp(`{host:.+}`)"
            - "traefik.http.routers.redirect-https.entrypoints=http"
            - "traefik.http.routers.redirect-https.middlewares=redirect-to-https"
            # Bare domain to a subdomain
            - "traefik.http.middlewares.redirect-top-domain.redirectregex.regex=^http(s?)://.*${DOMAIN_TOP}.*"
            - "traefik.http.middlewares.redirect-top-domain.redirectregex.replacement=http$$1://${DOMAIN_OMBI_1}"
            - "traefik.http.routers.redirect-top-domain.rule=Host(`${DOMAIN_TOP}`)"
            - "traefik.http.routers.redirect-top-domain.entrypoints=https"
            - "traefik.http.routers.redirect-top-domain.middlewares=redirect-top-domain"
            - "traefik.http.routers.redirect-top-domain.tls.certresolver=leresolver"

    # ----------------------------------------
    # MINIO
    # ----------------------------------------
    minio:
        image: minio/minio
        container_name: minio
        restart: unless-stopped
        ports:
            - '9000:9000'
        user: $PUID:$PGID
        environment:
            - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
            - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
        command:
            - 'server'
            - '/data'
        volumes:
            - '${MEDIAINCOMPLETEDIRECTORY}/minio:/data'

    # ----------------------------------------
    # RPDB (Ratings Poster DB)
    # ----------------------------------------
    rpdb:
        image: jaruba/rpdb-folders-docker
        container_name: rpdb
        restart: unless-stopped
        ports:
            - '8750:8750'
        user: $PUID:$PGID
        volumes:
            - '${CONFIGDIRECTORY}/rpdb:/rpdb/config'
            - '${MEDIACOMPLETEDIRECTORY}/tv:/rpdb/mounts/tvshows'
            - '${MEDIACOMPLETEDIRECTORY}/movies:/rpdb/mounts/movies'
